/* auto-generated by gen_sdk_syscalls.py, don't edit */

#ifndef Z_INCLUDE_SYSCALLS_KOBJECT_H
#define Z_INCLUDE_SYSCALLS_KOBJECT_H


#ifdef __cplusplus
extern "C" {
#endif

extern void z_impl_k_object_access_grant(const void * object, struct k_thread * thread);

__pinned_func
static inline void k_object_access_grant(const void * object, struct k_thread * thread)
{
	z_impl_k_object_access_grant(object, thread);
}


extern void z_impl_k_object_release(const void * object);

__pinned_func
static inline void k_object_release(const void * object)
{
	z_impl_k_object_release(object);
}


extern void * z_impl_k_object_alloc(enum k_objects otype);

__pinned_func
static inline void * k_object_alloc(enum k_objects otype)
{
	return z_impl_k_object_alloc(otype);
}


extern void * z_impl_k_object_alloc_size(enum k_objects otype, size_t size);

__pinned_func
static inline void * k_object_alloc_size(enum k_objects otype, size_t size)
{
	return z_impl_k_object_alloc_size(otype, size);
}


#ifdef __cplusplus
}
#endif

#endif /* include guard */
