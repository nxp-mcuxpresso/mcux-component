/*!
@addtogroup usart_cmsis_driver
@details This section describes the programming interface of the USART Cortex Microcontroller Software 
 Interface Standard (CMSIS) driver. And this driver defines generic peripheral driver interfaces for middleware
 making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller 
 peripherals with middleware that implements for example communication stacks, file systems, or graphic user 
 interfaces. 
 More information and usage methord see http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.

The USART driver includes  transactional APIs.

Transactional APIs can be used to enable the peripheral quickly and in the
application if the code size and performance of transactional APIs can satisfy the
requirements. If the code size and performance are critical requirements please write 
custom code. 


## USART Send using an interrupt method {#USARTCaseInterrupt}

~~~~~{.c}
    /* USART  callback */
    void USART_Callback(uint32_t event)
    {
        if (event == ARM_USART_EVENT_SEND_COMPLETE)
        {
            txOnGoing = false;
        }
    }
    Driver_USART0.Initialize(USART_Callback);
    Driver_USART0.PowerControl(ARM_POWER_FULL);
    /* Send g_tipString out. */
    txOnGoing = true;
    Driver_USART0.Send(g_tipString, sizeof(g_tipString) - 1);

    /* Wait send finished */
    while (txOnGoing)
    {
    }
~~~~~


## USART Send using the DMA method {#USARTCaseDma}

~~~~~{.c}
    /* USART  callback */
    void USART_Callback(uint32_t event)
    {
        if (event == ARM_USART_EVENT_SEND_COMPLETE)
        {
            txOnGoing = false;
        }

    }

    Driver_USART0.Initialize(USART_Callback);
    DMA_Init(DMA0);
    Driver_USART0.PowerControl(ARM_POWER_FULL);

    /* Send g_tipString out. */
    txOnGoing = true;

    Driver_USART0.Send(g_tipString, sizeof(g_tipString) - 1);

    /* Wait send finished */
    while (txOnGoing)
    {
    }
~~~~~

*/
