/*!
@addtogroup spi_cmsis_driver
@details This section describes the programming interface of the spi Cortex Microcontroller Software 
 Interface Standard (CMSIS) driver. And this driver defines generic peripheral driver interfaces for middleware
 making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller 
 peripherals with middleware that implements for example communication stacks, file systems, or graphic user 
 interfaces. 
 More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.

# Function groups{#spiFunGrps}

## SPI CMSIS GetVersion Operation {#spiGetVersionOps}

This function group will return the DSPI CMSIS Driver version to user.

## SPI CMSIS GetCapabilities Operation {#spiGetCapOps}

This function group will return the capabilities of this driver.

##SPI CMSIS Initialize and Uninitialize Operation{#spiInitResetOps}

This function will initialize and uninitialize the instance in master mode or slave mode. And this API must be called before you configure an instance or after you Deinit an instance.The right steps to start an instance is that you must initialize the instance which been slected firstly,then you can power on the instance.After these all have been done,you can configure the instance by using control operation.If you want to Uninitialize the instance, you must power off the instance first.

## SPI CMSIS Transfer Operation {#spiTransOps}

This function group controls the transfer, master send/receive data, and slave send/receive data.

## SPI CMSIS Status Operation {#spiStatusOps}

This function group gets the spi transfer status.

## SPI CMSIS Control Operation {#spiControlOps}

This function can select instance as master mode or slave mode, set baudrate for master mode transfer, get current baudrate of master mode transfer,set transfer data bits and set other control command.

# Typical use case {#spiTpyUC}

## Master Operation {#spiMasterOps}

~~~~~{.c}
 	/* Variables */
 	uint8_t masterRxData[TRANSFER_SIZE] = {0U};
	uint8_t masterTxData[TRANSFER_SIZE] = {0U};

    /*DSPI master init*/
    Driver_SPI0.Initialize(DSPI_MasterSignalEvent_t);
    Driver_SPI0.PowerControl(ARM_POWER_FULL);
    Driver_SPI0.Control(ARM_SPI_MODE_MASTER, TRANSFER_BAUDRATE);

    /* Start master transfer */
    Driver_SPI0.Transfer(masterTxData, masterRxData, TRANSFER_SIZE);

    /* Master power off */
    Driver_SPI0.PowerControl(ARM_POWER_OFF);

    /* Master uninitialize */
    Driver_SPI0.Uninitialize();
~~~~~

## Slave Operation {#spiSlaveOps}

~~~~~{.c}
	/* Variables */
	uint8_t slaveRxData[TRANSFER_SIZE] = {0U};
	uint8_t slaveTxData[TRANSFER_SIZE] = {0U};

    /*DSPI slave init*/
    Driver_SPI2.Initialize(DSPI_SlaveSignalEvent_t);
    Driver_SPI2.PowerControl(ARM_POWER_FULL);
    Driver_SPI2.Control(ARM_SPI_MODE_SLAVE, false);

    /* Start slave transfer */
    Driver_SPI2.Transfer(slaveTxData, slaveRxData, TRANSFER_SIZE);

    /* slave power off */
    Driver_SPI2.PowerControl(ARM_POWER_OFF);

    /* slave uninitialize */
    Driver_SPI2.Uninitialize();
~~~~~

*/
